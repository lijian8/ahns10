/**
 * @file
 * @author Alex Wainwright
 *
 * Last Modified by: $Author: wainwright.alex $
 *
 * $LastChangedDate: 2009-10-17 16:00:35 +1000 (Sat, 17 Oct 2009) $
 * $Rev: 853 $
 *
 * Queensland University of Technology
 *
 * @section DESCRIPTION
 * The header file for the autopilot implemented in ahns_autopilot.cpp
 */

#include <QThread>
#include "pid_class.h"
#include "uplink.h"
#include "ahns_moving_average.h"

#include "newmat/newmat.h"

#define BATT_MAX 12.5 	/// The voltage of the onboard battery when fully charged .
#define BATT_MIN 11.3	/// The voltage of the onboard battery when empty.

#define SATURATED_HIGH 1
#define SATURATED_LOW -1
#define NOT_SATURATED 0

/**
 * An enumeration representing whether the application is in autonomous or manual mode.  This is used by the telemetry thread to decide whether or not to start the autopilot thread.
 */
enum op_mode{
	autonomous, 	/// Autonomous mode
	manual,		/// Manual mode
};

/**
 * A structure representing the state of the helicopter. This is generated by the state estimator and used by the autopilot.
 */
struct State
{
	
	double x;
	double y;	/// x, y and z positions of the helicopter
	double z;			
	
	double x_rate;
	double y_rate;	/// x, y and z velocities of the helicopter
	double z_rate;
	
	double yaw;
	double pitch;	/// yaw, pitch and roll angles of the helicopter 
	double roll; 
	
	double yaw_rate;
	double pitch_rate;/// yaw, pitch and roll rates of the helicopter
	double roll_rate; 

	/// the time of this state
	double time;		

	/// the period between the current state and the previous state		
	double period;	

	/// the battery level in percentage		
	double battery;	
};

/**
 * A structure representing sensor data from the UAV. This is the (almost) raw data which goes into the state estimator for it to output a state.
 */
struct Telemetry
{
	double x_accel;
	double y_accel;		/// x, y and z accelerations (from accelerometers)
	double z_accel;

	double yaw_rate;
	double pitch_rate;	/// yaw, pitch and roll rates (from the gyros)
	double roll_rate;

	/// the time the data were recorded 
 	unsigned int time;				

	/// the reading from the altitude sensor. NOTE: this is the perpendicular distance to the ground, not the actual altitude 
	double alt;					

	/// the battery voltage
	double battery;					
};


/**
 * The class for the autopilot thread. This thread contains a state estimator and a controller. It will take sensor data as inputs, and output commands for the UAV.
 */
class ap_thread : public QThread
{

	Q_OBJECT

public:
	ap_thread(Telemetry *heli,int serial_port, uplink::heli_trims *h_trims);
	~ap_thread();
	void run();
//	void stop();

	int Estimator(Telemetry *telem, State *state); //owen's function
	int Controller(State *heli);
	void setGains(double *pitch, double *roll, double *yaw, double *collective);
	void setCommands(double pitch, double roll, double yaw, double alt);
	void setBounds(double lon_max, double lon_min, double lat_max, double lat_min, double col_max, double col_min, double rud_max, double rud_min);
	
	State get_state();
	uplink::heli_command get_cmd();
	void getPIDs(double* lat, double* lon, double* col, double* rud);
	void querySaturation(int* latSat, int* lonSat, int* colSat, int* rudSat);

signals:
	/// Signal emitted when the UAV state has been updated, and the function get_state() should be called.
	void new_state();	

	/// Signal emitted when new commands have been sent to the UAV and the function get_cmd() should be called.
	void new_cmd();

public slots:
	/// Set the altitude filter length
	void setAltFiltLength(int length);
	/// Set the packet period filter length
	void setPeriodFiltLength(int length);
	/// Set the battery level filter length
	void setBattFiltLength(int length);

private:

	void init_state_estimator();
	void state_estimator_cleanup();
	
	Telemetry *m_telemetry;
	bool stopnow;
	int groundpulse_port;
	uplink::heli_trims *trim_vals;
	ahnsPID *pitch2long;
	ahnsPID *roll2lat;
	ahnsPID *yaw2rud;
	ahnsPID *alt2col;
	moving_average *alt_av;
	moving_average *period_av;
	moving_average *batt_av;
	int alt_filt_len;

	//commands
	uplink::heli_command output;

	//boundaries
	double longitudinal_max;
	double longitudinal_min;
	double lateral_max;
	double lateral_min;
	double collective_max;
	double collective_min;
	double rudder_max;
	double rudder_min;

	double pitch_cmd;  //TODO: are these four used?
	double roll_cmd;
	double yaw_cmd;
	double altitude_cmd;

	double latPID_vals[3];
	double lonPID_vals[3];
	double rudPID_vals[3];
	double colPID_vals[3];

	double m_latSat, m_lonSat, m_colSat, m_rudSat;

	///The variable in which to store the latest UAV states, so that they can be read externally (by get_state())
	State live_state; 
	///The variable in which to store the latest commands sent to the UAV, so that they can be read externally (by get_command())
	uplink::heli_command live_cmd;	
	
	NEWMAT::Matrix *A, *B, *C, *x, *u, *y, *P, *s, *S_z, *S_w, *K;

};

