
AHNS_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002e8  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c7  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000300  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018f  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003a7  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000158  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 83 00 	call	0x106	; 0x106 <main>
  c6:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <UART1_vInit>:

void UART1_vInit(void)

{
// Set baud rate
UBRR1H = (uint8_t)(MYUBRR>>8);
  ce:	10 92 98 00 	sts	0x0098, r1
UBRR1L = (uint8_t)MYUBRR;
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	80 93 99 00 	sts	0x0099, r24
// Set frame format to 8 data bits, no parity, 1 stop bit
//UCSR1C = (0<<USBS1)|(1<<UCSZ1)|(1<<UCSZ0);
//UCSR1C = (0<<USBS1)|(3<<UCSZ1)|(0<<UPM10);
// Enable receiver and1 transmitter
UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 9a 00 	sts	0x009A, r24
}
  de:	08 95       	ret

000000e0 <UART0_vInit>:

void UART0_vInit(void)

{
// Set baud rate
UBRR0H = (uint8_t)(MYUBRR>>8);
  e0:	10 92 90 00 	sts	0x0090, r1
UBRR0L = (uint8_t)MYUBRR;
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	89 b9       	out	0x09, r24	; 9
// Set frame format to 8 data bits, no parity, 1 stop bit
//UCSR1C = (0<<USBS1)|(1<<UCSZ1)|(1<<UCSZ0);
//UCSR1C = (0<<USBS1)|(3<<UCSZ1)|(0<<UPM10);
// Enable receiver and1 transmitter
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	8a b9       	out	0x0a, r24	; 10
}
  ec:	08 95       	ret

000000ee <UART1_SendByte>:

void UART1_SendByte(uint8_t Data)
{
  ee:	98 2f       	mov	r25, r24
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR1A & (1<<UDRE1)) )
  f0:	80 91 9b 00 	lds	r24, 0x009B
  f4:	85 ff       	sbrs	r24, 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <UART1_SendByte+0x2>
;
/* Put data into buffer, sends the data */
UDR1 = Data;
  f8:	90 93 9c 00 	sts	0x009C, r25
}
  fc:	08 95       	ret

000000fe <UART0_SendByte>:
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR0A & (1<<UDRE0)) )
  fe:	5d 9b       	sbis	0x0b, 5	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <UART0_SendByte>
;
/* Put data into buffer, sends the data */
UDR0 = Data;
 102:	8c b9       	out	0x0c, r24	; 12
}
 104:	08 95       	ret

00000106 <main>:


int main(void)
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29

void UART0_vInit(void)

{
// Set baud rate
UBRR0H = (uint8_t)(MYUBRR>>8);
 112:	10 92 90 00 	sts	0x0090, r1
UBRR0L = (uint8_t)MYUBRR;
 116:	98 e0       	ldi	r25, 0x08	; 8
 118:	99 b9       	out	0x09, r25	; 9
// Set frame format to 8 data bits, no parity, 1 stop bit
//UCSR1C = (0<<USBS1)|(1<<UCSZ1)|(1<<UCSZ0);
//UCSR1C = (0<<USBS1)|(3<<UCSZ1)|(0<<UPM10);
// Enable receiver and1 transmitter
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 11a:	88 e1       	ldi	r24, 0x18	; 24
 11c:	8a b9       	out	0x0a, r24	; 10

void UART1_vInit(void)

{
// Set baud rate
UBRR1H = (uint8_t)(MYUBRR>>8);
 11e:	10 92 98 00 	sts	0x0098, r1
UBRR1L = (uint8_t)MYUBRR;
 122:	90 93 99 00 	sts	0x0099, r25
// Set frame format to 8 data bits, no parity, 1 stop bit
//UCSR1C = (0<<USBS1)|(1<<UCSZ1)|(1<<UCSZ0);
//UCSR1C = (0<<USBS1)|(3<<UCSZ1)|(0<<UPM10);
// Enable receiver and1 transmitter
UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 126:	80 93 9a 00 	sts	0x009A, r24
    LED_ON( BLUE );
	LED_OFF( YELLOW );

	//UART test output

	TxData8b = 0x41;
 12a:	01 e4       	ldi	r16, 0x41	; 65
	UART1_SendByte(TxData8b);
	UART0_SendByte(TxData8b);
	TxData8b = 0x42;
 12c:	12 e4       	ldi	r17, 0x42	; 66

	LED_OFF( RED );
    LED_OFF( BLUE );
	LED_ON( YELLOW );

	TxData8b = 0x43;
 12e:	93 e4       	ldi	r25, 0x43	; 67
 130:	e9 2e       	mov	r14, r25
	UART1_SendByte(TxData8b);
	TxData8b = 0x44;
 132:	84 e4       	ldi	r24, 0x44	; 68
 134:	f8 2e       	mov	r15, r24


while ( 1 )
{

    InitTimer();
 136:	0e 94 25 01 	call	0x24a	; 0x24a <InitTimer>

    ASSR &= ~( 1 << AS0 );  // Make sure Port G LED pins are setup for I/O
 13a:	80 b7       	in	r24, 0x30	; 48
 13c:	87 7f       	andi	r24, 0xF7	; 247
 13e:	80 bf       	out	0x30, r24	; 48

    RED_LED_DDR     |= RED_LED_MASK;
 140:	80 91 64 00 	lds	r24, 0x0064
 144:	80 61       	ori	r24, 0x10	; 16
 146:	80 93 64 00 	sts	0x0064, r24
    YELLOW_LED_DDR  |= YELLOW_LED_MASK;
 14a:	bc 9a       	sbi	0x17, 4	; 23
    BLUE_LED_DDR    |= BLUE_LED_MASK;
 14c:	80 91 64 00 	lds	r24, 0x0064
 150:	88 60       	ori	r24, 0x08	; 8
 152:	80 93 64 00 	sts	0x0064, r24

	//TStamp++;

//Clear LED Status
	LED_OFF( RED );
 156:	80 91 65 00 	lds	r24, 0x0065
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	80 93 65 00 	sts	0x0065, r24
    LED_OFF( BLUE );
 160:	80 91 65 00 	lds	r24, 0x0065
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 93 65 00 	sts	0x0065, r24
	LED_OFF( YELLOW );
 16a:	c4 9a       	sbi	0x18, 4	; 24


	LED_OFF( RED );
 16c:	80 91 65 00 	lds	r24, 0x0065
 170:	80 61       	ori	r24, 0x10	; 16
 172:	80 93 65 00 	sts	0x0065, r24
    LED_ON( BLUE );
 176:	80 91 65 00 	lds	r24, 0x0065
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	80 93 65 00 	sts	0x0065, r24
	LED_OFF( YELLOW );
 180:	c4 9a       	sbi	0x18, 4	; 24

	//UART test output

	TxData8b = 0x41;
 182:	00 93 03 01 	sts	0x0103, r16
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR1A & (1<<UDRE1)) )
 186:	80 91 9b 00 	lds	r24, 0x009B
 18a:	85 ff       	sbrs	r24, 5
 18c:	fc cf       	rjmp	.-8      	; 0x186 <main+0x80>
;
/* Put data into buffer, sends the data */
UDR1 = Data;
 18e:	00 93 9c 00 	sts	0x009C, r16
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR0A & (1<<UDRE0)) )
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <main+0x8c>
;
/* Put data into buffer, sends the data */
UDR0 = Data;
 196:	0c b9       	out	0x0c, r16	; 12
	//UART test output

	TxData8b = 0x41;
	UART1_SendByte(TxData8b);
	UART0_SendByte(TxData8b);
	TxData8b = 0x42;
 198:	10 93 03 01 	sts	0x0103, r17
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR1A & (1<<UDRE1)) )
 19c:	80 91 9b 00 	lds	r24, 0x009B
 1a0:	85 ff       	sbrs	r24, 5
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <main+0x96>
;
/* Put data into buffer, sends the data */
UDR1 = Data;
 1a4:	10 93 9c 00 	sts	0x009C, r17
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR0A & (1<<UDRE0)) )
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <main+0xa2>
;
/* Put data into buffer, sends the data */
UDR0 = Data;
 1ac:	1c b9       	out	0x0c, r17	; 12
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
	UART1_SendByte(TxData8b);
	UART0_SendByte(TxData8b);

	for ( i = 0; i < 50; i++ ) 
        {
        	WaitForTimer0Rollover();
 1b2:	0e 94 2c 01 	call	0x258	; 0x258 <WaitForTimer0Rollover>
	UART0_SendByte(TxData8b);
	TxData8b = 0x42;
	UART1_SendByte(TxData8b);
	UART0_SendByte(TxData8b);

	for ( i = 0; i < 50; i++ ) 
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	c2 33       	cpi	r28, 0x32	; 50
 1ba:	d1 05       	cpc	r29, r1
 1bc:	d1 f7       	brne	.-12     	; 0x1b2 <main+0xac>
        {
        	WaitForTimer0Rollover();
		}

	LED_OFF( RED );
 1be:	80 91 65 00 	lds	r24, 0x0065
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	80 93 65 00 	sts	0x0065, r24
    LED_OFF( BLUE );
 1c8:	80 91 65 00 	lds	r24, 0x0065
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	80 93 65 00 	sts	0x0065, r24
	LED_ON( YELLOW );
 1d2:	c4 98       	cbi	0x18, 4	; 24

	TxData8b = 0x43;
 1d4:	e0 92 03 01 	sts	0x0103, r14
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR1A & (1<<UDRE1)) )
 1d8:	80 91 9b 00 	lds	r24, 0x009B
 1dc:	85 ff       	sbrs	r24, 5
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <main+0xd2>
;
/* Put data into buffer, sends the data */
UDR1 = Data;
 1e0:	e0 92 9c 00 	sts	0x009C, r14
    LED_OFF( BLUE );
	LED_ON( YELLOW );

	TxData8b = 0x43;
	UART1_SendByte(TxData8b);
	TxData8b = 0x44;
 1e4:	f0 92 03 01 	sts	0x0103, r15
{
// Wait if a byte is being transmitted
/*while((UCSR1A&(1<<UDRE1)) == 0);
// Transmit data
UDR1 = Data;*/
while ( !( UCSR1A & (1<<UDRE1)) )
 1e8:	80 91 9b 00 	lds	r24, 0x009B
 1ec:	85 ff       	sbrs	r24, 5
 1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <main+0xe2>
;
/* Put data into buffer, sends the data */
UDR1 = Data;
 1f0:	f0 92 9c 00 	sts	0x009C, r15
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
	TxData8b = 0x44;
	UART1_SendByte(TxData8b);

	for ( i = 0; i < 50; i++ ) 
        {
        	WaitForTimer0Rollover();
 1f8:	0e 94 2c 01 	call	0x258	; 0x258 <WaitForTimer0Rollover>
	TxData8b = 0x43;
	UART1_SendByte(TxData8b);
	TxData8b = 0x44;
	UART1_SendByte(TxData8b);

	for ( i = 0; i < 50; i++ ) 
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	c2 33       	cpi	r28, 0x32	; 50
 200:	d1 05       	cpc	r29, r1
 202:	d1 f7       	brne	.-12     	; 0x1f8 <main+0xf2>
 204:	98 cf       	rjmp	.-208    	; 0x136 <main+0x30>

00000206 <__vector_16>:
/**
*  Timer 0 interrupt handler
*/

SIGNAL(SIG_OVERFLOW0)        /* signal handler for tcnt0 overflow interrupt */
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
    // every 10 msec. Otherwise, it will increment every millisecond.

#if CFG_TIMER_MICRO_TICK
    static  uint8_t microTick = 0;

    if ( ++microTick >= 10 )
 214:	80 91 02 01 	lds	r24, 0x0102
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 02 01 	sts	0x0102, r24
 21e:	8a 30       	cpi	r24, 0x0A	; 10
 220:	58 f0       	brcs	.+22     	; 0x238 <__vector_16+0x32>
    {
        microTick = 0;
 222:	10 92 02 01 	sts	0x0102, r1

        gTickCount++;
 226:	80 91 00 01 	lds	r24, 0x0100
 22a:	90 91 01 01 	lds	r25, 0x0101
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 01 01 	sts	0x0101, r25
 234:	80 93 00 01 	sts	0x0100, r24
    // For 
    // 256 - 250 = 6

#define OVERFLOW_COUNT  ( CFG_CPU_CLOCK / 1000 / 64 )

    TCNT0 = (uint8_t) -OVERFLOW_COUNT;
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	82 bf       	out	0x32, r24	; 50

#if defined( CFG_TIMER0_MS_TICK )
    CFG_TIMER0_MS_TICK;
#endif

} // Timer 0 Overflow
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <InitTimer>:
void InitTimer( void )
{
#if defined( TCCR0B )
    TCCR0B = TIMER0_CLOCK_SEL_DIV_64; // Divide by 64
#else
    TCCR0  = TIMER0_CLOCK_SEL_DIV_64; // Divide by 64
 24a:	84 e0       	ldi	r24, 0x04	; 4
 24c:	83 bf       	out	0x33, r24	; 51
#endif
    TCNT0 = 0;
 24e:	12 be       	out	0x32, r1	; 50

    // Enable Timer 0 interrupt

#if defined( TIMSK )
    TIMSK = ( 1 << TOIE0 );
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	87 bf       	out	0x37, r24	; 55
#endif
#if defined( TIMSK0 )
    TIMSK0 = ( 1 << TOIE0 );
#endif

    sei();
 254:	78 94       	sei

} // InitTimer
 256:	08 95       	ret

00000258 <WaitForTimer0Rollover>:
#endif

#if CFG_TIMER_WAITFORTIMER0ROLLOVER
void WaitForTimer0Rollover( void )
{
    tick_t prevCount = gTickCount;
 258:	20 91 00 01 	lds	r18, 0x0100
 25c:	30 91 01 01 	lds	r19, 0x0101

    while ( gTickCount == prevCount )
 260:	80 91 00 01 	lds	r24, 0x0100
 264:	90 91 01 01 	lds	r25, 0x0101
 268:	82 17       	cp	r24, r18
 26a:	93 07       	cpc	r25, r19
 26c:	c9 f3       	breq	.-14     	; 0x260 <WaitForTimer0Rollover+0x8>
    {
        ;
    }

} // WaitForTimer0Rollover
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
